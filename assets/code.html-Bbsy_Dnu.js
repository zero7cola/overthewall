import{_ as n,o as s,c as a,e as t}from"./app-DiQl15id.js";const p={},o=t(`<h1 id="go代码片段" tabindex="-1"><a class="header-anchor" href="#go代码片段"><span>go代码片段</span></a></h1><h2 id="发送post请求" tabindex="-1"><a class="header-anchor" href="#发送post请求"><span>发送post请求</span></a></h2><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;bytes&quot;</span>
	<span class="token string">&quot;encoding/json&quot;</span>
	<span class="token string">&quot;fmt&quot;</span>
	<span class="token string">&quot;io/ioutil&quot;</span>
	<span class="token string">&quot;net/http&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> RequestData <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Key <span class="token builtin">string</span> <span class="token string">\`json:&quot;key&quot;\`</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 创建请求数据对象</span>
	data <span class="token operator">:=</span> RequestData<span class="token punctuation">{</span>
		Key<span class="token punctuation">:</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 将数据进行JSON序列化</span>
	jsonData<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;JSON序列化失败:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 创建POST请求</span>
	req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://example.com/api&quot;</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;创建请求失败:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 设置请求头部信息</span>
	req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">)</span>

	<span class="token comment">// 发送请求并获取响应</span>
	client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span><span class="token punctuation">}</span>
	resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;发送请求失败:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// 读取响应的内容</span>
	respBody<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;读取响应失败:&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 打印响应内容</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;响应内容:&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>respBody<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","code.html.vue"]]),r=JSON.parse('{"path":"/go/code.html","title":"go代码片段","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"发送post请求","slug":"发送post请求","link":"#发送post请求","children":[]}],"git":{"updatedTime":1710209336000},"filePathRelative":"go/code.md","excerpt":"\\n<h2>发送post请求</h2>\\n<div class=\\"language-go\\" data-ext=\\"go\\" data-title=\\"go\\"><pre class=\\"language-go\\"><code><span class=\\"token keyword\\">package</span> main\\n\\n<span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">(</span>\\n\\t<span class=\\"token string\\">\\"bytes\\"</span>\\n\\t<span class=\\"token string\\">\\"encoding/json\\"</span>\\n\\t<span class=\\"token string\\">\\"fmt\\"</span>\\n\\t<span class=\\"token string\\">\\"io/ioutil\\"</span>\\n\\t<span class=\\"token string\\">\\"net/http\\"</span>\\n<span class=\\"token punctuation\\">)</span>\\n\\n<span class=\\"token keyword\\">type</span> RequestData <span class=\\"token keyword\\">struct</span> <span class=\\"token punctuation\\">{</span>\\n\\tKey <span class=\\"token builtin\\">string</span> <span class=\\"token string\\">`json:\\"key\\"`</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">func</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// 创建请求数据对象</span>\\n\\tdata <span class=\\"token operator\\">:=</span> RequestData<span class=\\"token punctuation\\">{</span>\\n\\t\\tKey<span class=\\"token punctuation\\">:</span> <span class=\\"token string\\">\\"value\\"</span><span class=\\"token punctuation\\">,</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">// 将数据进行JSON序列化</span>\\n\\tjsonData<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> json<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Marshal</span><span class=\\"token punctuation\\">(</span>data<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"JSON序列化失败:\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">return</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">// 创建POST请求</span>\\n\\treq<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> http<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewRequest</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"POST\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"http://example.com/api\\"</span><span class=\\"token punctuation\\">,</span> bytes<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">NewBuffer</span><span class=\\"token punctuation\\">(</span>jsonData<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"创建请求失败:\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">return</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">// 设置请求头部信息</span>\\n\\treq<span class=\\"token punctuation\\">.</span>Header<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Set</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Content-Type\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"application/json\\"</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token comment\\">// 发送请求并获取响应</span>\\n\\tclient <span class=\\"token operator\\">:=</span> <span class=\\"token operator\\">&amp;</span>http<span class=\\"token punctuation\\">.</span>Client<span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n\\tresp<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> client<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Do</span><span class=\\"token punctuation\\">(</span>req<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"发送请求失败:\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">return</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token keyword\\">defer</span> resp<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n\\n\\t<span class=\\"token comment\\">// 读取响应的内容</span>\\n\\trespBody<span class=\\"token punctuation\\">,</span> err <span class=\\"token operator\\">:=</span> ioutil<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">ReadAll</span><span class=\\"token punctuation\\">(</span>resp<span class=\\"token punctuation\\">.</span>Body<span class=\\"token punctuation\\">)</span>\\n\\t<span class=\\"token keyword\\">if</span> err <span class=\\"token operator\\">!=</span> <span class=\\"token boolean\\">nil</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"读取响应失败:\\"</span><span class=\\"token punctuation\\">,</span> err<span class=\\"token punctuation\\">)</span>\\n\\t\\t<span class=\\"token keyword\\">return</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">// 打印响应内容</span>\\n\\tfmt<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">Println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"响应内容:\\"</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">string</span><span class=\\"token punctuation\\">(</span>respBody<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>"}');export{k as comp,r as data};
